<?php
/**
 *  This file is part of the BlackfyreStudio CRUD package which is a recreation of the Krafthaus Bauhaus package.
 *  Copyright (C) 2016. Galicz MiklÃ³s <galicz.miklos@blackfyre.ninja>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

namespace DummyRootNamespaceHttp\Controllers\Crud;

use DummyRootNamespace\User;
use BlackfyreStudio\CRUD\Master;
use BlackfyreStudio\CRUD\Planner\FilterPlanner;
use BlackfyreStudio\CRUD\Planner\FormPlanner;
use BlackfyreStudio\CRUD\Planner\IndexPlanner;
use BlackfyreStudio\CRUD\Planner\ScopePlanner;

/**
 * Class UserController
 * @package DummyRootNamespace\Http\Controllers\Crud
 */
class UserController extends Master
{

    /**
     * This function is called when configuring the list view.
     * @param IndexPlanner $planner
     */
    public function indexView(IndexPlanner $planner)
    {
        $planner->identifier('id');
        $planner->string('name')
            ->setLabel(trans('crud::user.name'));
        $planner->string('email')
            ->setLabel(trans('crud::user.email'));
        $planner->belongsToMany('roles')
            ->setLabel(trans('crud::user.roles'))
            ->display('name');
    }

    /**
     * This function is called when configuring the form view.
     * @param FormPlanner $planner
     */
    public function formView(FormPlanner $planner)
    {
        $planner->text('name')
            ->setLabel(trans('crud::user.name'));

        $planner->email('email')
            ->setLabel(trans('crud::user.email'));

        $planner->password('password')
            ->setLabel(trans('crud::user.password'));

        $planner->belongsToMany('roles')
            ->setLabel(trans('crud::user.roles'))
            ->display('name');
    }

    /**
     * This function is called when configuring the filter view.
     * @param FilterPlanner $planner
     */
    public function filters(FilterPlanner $planner)
    {
        /*
        $planner->text('email')
            ->setLabel('crud::user.filter.email');
        */
    }

    /**
     * This function is called when configuring the scope view.
     * @param ScopePlanner $planner
     */
    public function scopes(ScopePlanner $planner)
    {

    }

    /**
     * Custom create rule
     * @param array $input
     * @return static
     */
    public function create($input) {


        if ($input['password']===$input['password_confirm']) {

            $input['password'] = bcrypt($input['password']);

            return User::create($input);

        }
    }

    /**
     * Update hook.
     *
     * @param  array $input
     *
     * @access public
     * @return void
     */
    public function update($input)
    {
        $user = User::find($input['user_id']);

        if (empty($input['password'])) {
            unset($input['password']);

        } else {
            if ($input['password']===$input['password_confirm']) {

                $input['password'] = bcrypt($input['password']);


            }
        }


        $user->update($input);
    }

}